# (Для закрепления предыдущего материала). Вводится таблица целых чисел (см. пример ниже) размером N x N элементов
# (N определяется по входным данным). Эта таблица содержит нули, но кое-где - единицы. С помощью функции с именем verify
# , на вход которой передается двумерный список чисел, необходимо проверить, являются ли единицы изолированными друг от
# друга, то есть, вокруг каждой единицы должны быть нули.
# Рекомендуется следующий алгоритм. В функции verify производить перебор двумерного списка.
# Для каждого элемента (списка) со значением 1 вызывать еще одну вспомогательную функцию is_isolate для проверки
# изолированности единицы. То есть, функция is_isolate должна возвращать True, если единица изолирована и False -
# в противном случае.
# Как только встречается не изолированная единица, функция verify должна возвращать False.
# Если успешно доходим (по элементам списка) до конца, то возвращается значение True.
# Функцию выполнять не нужно, только определить.
# P. S. При реализации функции is_isolate не следует прописывать восемь операторов if. Подумайте, как это можно сделать
# красивее (с точки зрения реализации алгоритма).
# Sample Input:
#
# 1 0 0 0 0
# 0 0 1 0 0
# 0 0 0 0 0
# 0 1 0 1 0
# 0 0 0 0 0
# Sample Output:
#
# True


def is_isolate(args, i ,x):
    fl = True
    if args[i+1][x+1] + args[i+1][x] + args[i][x+1] + args[i][x] > 1:
        fl = False

    return fl


def verify(args):
    fl = True
    for i in range(len(args)-1):
        for x in range(len(args[i])-1):
            if not is_isolate(args, i, x):
                fl = False
    return fl


res = verify([[0, 0, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 0, 0 ], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0]])
print(res)


# another solution


def is_isolate(*args):
    return sum(args) > 1


def verify(n):
    flag = True
    for i in range(len(n) - 1):
        for j in range(len(n) - 1):
            if is_isolate(n[i][j], n[i][j+1], n[i+1][j], n[i+1][j+1]):
                flag = False
    return flag


print(verify([[0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0 ], [0, 0, 0, 1, 0], [0, 0, 0, 0, 0]]))