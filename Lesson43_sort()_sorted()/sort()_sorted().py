a = [12.5, 6, 4, 3, 9, 15]
a.sort()
print(a)  # [3, 4, 6, 9, 12.5, 15]
# если мы хотим отсортировать по понижению числа
a.sort(reverse=True)
print(a)  # [15, 12.5, 9, 6, 4, 3]
a = [12.5, 6, 4, 3, 9, 15]
print(sorted(a))  # [3, 4, 6, 9, 12.5, 15]
# отсортировать по убыванию
print(sorted(a, reverse=True))  # [15, 12.5, 9, 6, 4, 3]
# сохраним результат в переменной
b = sorted(a, reverse=True)
print(b)  # [15, 12.5, 9, 6, 4, 3]

# А что если, нам нужно отсортировать строку или кортеж!!!!
r = ('Волга', 'Лена', 'Дон', 'Енисейё')
# функция sorted() применяется к любым итерируемым объектам, а кортеж как раз таки итерируемый объект
print(sorted(r))  # ['Волга', 'Дон', 'Енисейё', 'Лена']
# или передать строку на отсортировку
print(sorted('Python'))  # ['P', 'h', 'n', 'o', 't', 'y']
# и словарь отсортировать тоже можем
d = {'river': 'река', 'house': 'дом', 'tree': 'дерево', 'road': 'дорога'}
# по умолчанию это метод даёт только ключи
print(sorted(d))  # ['house', 'river', 'road', 'tree']
# если мы хотим отсортировать значения то: sorted(d.values())
print(sorted(d.values()))  # ['дерево', 'дом', 'дорога', 'река']
# а если использовать метод: sorted(d.items()), будут отсортированы и ключи и значения
print(sorted(d.items()))  # [('house', 'дом'), ('river', 'река'), ('road', 'дорога'), ('tree', 'дерево')]
# как получить словарь а не кортеж:
b = dict(sorted(d.items()))
print(b)  # {'house': 'дом', 'river': 'река', 'road': 'дорога', 'tree': 'дерево'}
