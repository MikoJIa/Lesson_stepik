n = 7
a = [0] * n

for i in range(n):
    a[i] = i ** 2
print(a)  # [0, 1, 4, 9, 16, 25]
# Но, мы можем данный код с верху реализовать с помощью так называемого List Comprehensions
a = [i ** 2 for i in range(n)]
print(a)  # [0, 1, 4, 9, 16, 25]

x = [1 for i in range(5)]
print(x)  # [1, 1, 1, 1, 1]

a = [x % 4 for x in range(n)]
print(a)  # [0, 1, 2, 3, 0, 1, 2]

a = [x % 2 == 0 for x in range(n)]
print(a)  # [True, False, True, False, True, False, True]
# можем сформировать линейную функцию
a = [0.5 * x + 1 for x in range(n)]
print(a)  # [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0]
# на выходе мы хотим получить строку из целых чисел, тоесть преабразуем строку в число
d_inp = input('Введите целые чтсла через пробел - ')

a = [int(x) for x in d_inp.split()]
print(d_inp.split())  # Список из строк ['1', '2', '3', '4']
print(a)  # список из чисел [1, 2, 3, 4]
print(type(a))

t = ['Я', 'б', 'Python', 'выучил', 'бы', 'за', 'то', 'что', 'есть', 'он', 'на', 'этом', 'канале']
a = [d for d in t]
print(a)  # ['Я', 'б', 'Python', 'выучил', 'бы', 'за', 'то', 'что', 'есть', 'он', 'на', 'этом', 'канале']
# Если мы добавим в функцию len мы получим длинну каждой строки
a = [len(d) for d in t]
print(a)  # [1, 1, 6, 6, 2, 2, 2, 3, 4, 2, 2, 4, 6]
a = [x for x in range(-5, 5) if x < 0]
print(a)  # [-5, -4, -3, -2, -1]
a = [x for x in range(-5, 5) if x % 2 == 0]
print(a)  # [-4, -2, 0, 2, 4]
a = [x for x in range(-6, 7) if x % 2 == 0 and x % 3 == 0]
print(a)  # [-6, 0, 6]
# Необходимо вывести только те города у которых длинна меньше 7
cities = ['Москва', 'Рязань', 'Тверь', 'Ярославль', 'Владимир']
cities = [city for city in cities if len(city) < 7]
print(cities)
# Использование тернарного оператора
d = [4, 3, -5, 0, 2, 11, 122, -8, 9]
c = ['четное' if x % 2 == 0 else 'нечетное' for x in d]
print(c) # ['четное', 'нечетное', 'нечетное', 'четное', 'четное', 'нечетное', 'четное', 'четное', 'нечетное']
a = ['четное' if x % 2 == 0 else 'нечетное'
     for x in d
     if x > 0]
print(a) # ['четное', 'нечетное', 'четное', 'нечетное', 'четное', 'нечетное']
