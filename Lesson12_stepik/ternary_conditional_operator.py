# тернарный оператор
a = 12
b = 7
if a > b:
    res = a
else:
    res = b
print(res) # 12
# с помощью тернарного выражения мы можем код выше записать в две строки
# тернарный оператор автомотически возвращяет результат
res = a if a > b else b
print(res) # 12

c = -12
n = -7
res = abs(c) if c > n else abs(n)
print(res) # 7

# если строка t ссылается на строку s то мы переведём строку s в верхний регистр
s = 'Python'
t = 'upper'
res = s.upper() if t == 'upper' else s
print(res) # PYTHON
# условный тернарный оператор мы можем использовать прямо в списке
h = 12
u = 7
lst = [1, 2, 3, 4, 5, 6,  h if h < u else u]
print(lst) # [1, 2, 3, 4, 5, 6, 7]
# или со строками
                    # скобки сдесь обязательны
string = 'a - ' + ('чётное' if h % 2 == 0 else 'нечётное') + ' число'
print(string) # a - чётное число
# если убрать скобки получится другой результат
# сработало только условие чётное, а дальше идёт условие если чесло не чётоное
# усли переменная h - буде 13 то у нас вывод будет 'нечётное число'
string = 'a - ' + 'чётное' if h % 2 == 0 else 'нечётное' + ' число'
print(string) # a - чётное
# тернарный оператор можно использовать в аргументах функции
# print(max(1, 2, 4, h if h > 0 else u, 6, 5) # 12

# вычисляем большее число
a = 2
b = 3
c = -4
res = (a if a > c else c) if a > b else (b if b > c else c)
print(res)

msg = input()
print(msg[::-1])
res = 'палиндром' if msg == msg[::-1] else 'не палиндром'
print(res)